#!/bin/bash
# Author - Jan Christoph Uhde
# Based on scripts by Willi and Simran

# TODO
#
# - fix broken tests
# - execute container with same permissions as calling user not root
# - find out branch name
# - add http.tar.gz package creation
# - test other formats
#

# get script dir
script_dir="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
## set options for safety
# fail on unset variables
set -u
# "prevent failing_cmd | echo "still exit status 0 ` from succeeding"
set -o pipefail

#### VARIABLES CONTROLLING THE BUILD ######################################
# The Variables are usually set by the docker entry point
#
# variables that MUST be set before invoking the script
#
[[ $ARANGO_WORK ]] || ferr "path to work dir not set"
# control if there is debug output or not
ARANGO_DEBUG=true

# variables that SHOULD be set before invoking the script
#
# path to "arangodb" source
export ARANGO_SOURCE="${ARANGO_SOURCE:-"$ARANGO_WORK/ArangoDB"}"
export ARANGO_SOURCE_DOC="${ARANGO_SOURCE_DOC:-"$ARANGO_SOURCE/Documentation"}"
export ARANGO_SOURCE_DOC_BOOKS="${ARANGO_SOURCE_DOC_BOOKS:-"$ARANGO_SOURCE_DOC/Documentation/Books"}"

# path to documentation build
export ARANGO_BUILD_DOC="${ARANGO_BUILD_DOC:-"$ARANGO_WORK/build-documentation"}"
export ARANGO_BUILD_DOC_PRE="${ARANGO_BUILD_DOC_PRE:-"$ARANGO_BUILD_DOC/ppdir"}"
export ARANGO_BUILD_DOC_OUT="${ARANGO_BUILD_DOC_OUT:-"$ARANGO_BUILD_DOC/books"}"

#### VARIABLES CONTROLLING THE BUILD - END ######################################

#### GOBAL SETUP ################################################################

# pull in bash_lib or create replacement functions
if . "/root/bash_lib"; then
    ferr(){ _o_ferr "$@"; }
    err(){ _o_err "$@"; }
    section(){ _o_section "$@"; }
    say(){ _o_say "$@"; }
    success(){ _o_success "$@"; }

else
    echo "could not source bash_lib"
    ferr(){ echo "Error: $@"; exit 1; }
    err(){ echo "Error: $@";  }
    section(){ echo "$@"; }
    say(){ echo "$@"; }
    success(){ echo "Success $@"; }
fi

success(){ echo "Success: $@"; }

# define global functions
debug(){ say "#-# DEBUG #-# " "$@"; }

echo "================================================================================"
section " ArangoDB Documenation Build script " | sed 's/-/=/g'
echo "================================================================================"

#### GLOBAL VARS THAT SHOULD NOT BE MODIFIED BY USERS ########################################################
ALLBOOKS="HTTP AQL Cookbook Drivers" #TODO reactivate Manual
ALLBOOKS="HTTP AQL Manual Cookbook Drivers"
OTHER_MIME="pdf epub mobi"
TRIPPLETICS='```'

newVersionNumber="$( tr -d '\r\n' < "$ARANGO_SOURCE/VERSION" )"
#If ../../VERSION contains the string "devel" the current date will be added to all pages containing the version.

if echo "${newVersionNumber}" | grep -q devel; then
    VERSION="${newVersionNumber} $(date +' %d. %b %Y ')"
    RELEASE_DIRECTORY=devel
else
    VERSION="${newVersionNumber}"
    RELEASE_DIRECTORY=$(sed "s;\\.[0-9]*$;;" <<< "${newVersionNumber}")
fi
export VERSION

declare -A ALL_GSEARCH_ID
for book in ${ALLBOOKS}; do
    ALL_GSEARCH_ID[$book]="$( grep "GSEARCH_ID_${book}" "$ARANGO_SOURCE/VERSIONS" |sed 's;.*"\([0-9a-zA-Z:_-]*\)".*;\1;' )"
done

GCHANGE_FREQ="$(grep "GCHANGE_FREQ" "$ARANGO_SOURCE/VERSIONS" |sed 's;.*"\([0-9a-zA-Z:]*\)".*;\1;')"
GPRIORITY="$(grep "GPRIORITY" "$ARANGO_SOURCE/VERSIONS" |sed 's;.*"\([0-9a-zA-Z.]*\)".*;\1;')"
BROWSEABLE_VERSIONS="$(grep "BROWSEABLE_VERSIONS" "$ARANGO_SOURCE/VERSIONS" |sed -e 's;" *$;;' -e 's;.*";;')"

INSTALLED_GITBOOK_VERSION="$(gitbook ls |grep '*'|sed "s;.*\* ;;")"
if test -z "${INSTALLED_GITBOOK_VERSION}"; then
    echo "your container doesn't come with a preloaded version of gitbook, please update it."
    exit 1
fi
GITBOOK_ARGS=(--gitbook "${INSTALLED_GITBOOK_VERSION}")
#### GLOBAL VARS THAT SHOULD NOT BE MODIFIED BY USERS - END ########################################################

# pull in build lib
. /$script_dir/buildLib || ferr "failed to source buildLib"
# builds a single book




run_gitbook() {
    local cmd=( gitbook "${GITBOOK_ARGS[@]}" "$@" )
    echo "run ${cmd[@]}"
    if ! time "${cmd[@]}" ; then
        echo "==============================================================================="
        echo "## install log  ###############################################################"
        cat "$cache/book_install.log"
        echo "## book.json at install########################################################"
        cat "$cache/book.json_at_install"
        echo "## diff #######################################################################"
        diff book.json "$cache/book.json_at_install"
        echo "## book.json ##################################################################"
        cat book.json
        echo "## modules ####################################################################"
        ls -lisah node_modules
        ferr "running gitbook failed"
        echo "==============================================================================="
    fi
}

run_ditaa() {
    #create ditaa images
    local book_name="$1"
    local book_src="$2"
    local book_pre="$3"
    local book_out="$4"

    cd "$book_src"
    local use_ditaa=false
    if type ditaa; then
        say " - generating ditaa images"
        use_ditaa=true
    else
        say "- generating FAKE ditaa images - no ditaa installed"
    fi

    local file
    while read file; do
        local dest="$book_pre/${file//ditaa/png}"
        # if dest dir is not available then the creation of the
        # directory structures did most proably not work correctly
        if $use_ditaa; then
            ditaa "$file" "$dest" || ferr "ditaa for $file to $dest failed"
        else
            local fake="$ARANGO_SOURCE/js/node/node_modules/mocha/images/error.png"
            cp "$fake" "$dest" || ferr "fake ditaa for $file to $dest failed"
        fi
    done < <(find . -name "*.ditaa")
}

function build_book() {
    section " Build Book - $book " | sed 's/-/=/g' | sed 's/ = / - /'

    local book_name="$1"
    local book_src="$ARANGO_SOURCE_DOC_BOOKS/${book_name}"
    local book_pre="$ARANGO_BUILD_DOC_PRE/${book_name}"
    local book_out="$ARANGO_BUILD_DOC_OUT/${book_name}"

    section " Generating book ${book_name} "
    echo "book source:       $book_src"
    echo "preprocessing dir: $book_pre"
    echo "output dir:        $book_out"


    mkdir -p "$book_pre"
    mkdir -p "$book_out"

    # codeBlockReader creates the file AllComments.txt in the source dir `Documentation/Books`
    # TODO
    # - comment purpose and format of the created file
    # - make script position independent
    cd "$ARANGO_SOURCE_DOC_BOOKS" #TODO remove -- required by script below
    python $ARANGO_SOURCE/Documentation/Scripts/codeBlockReader.py || ferr "can not run codeBlockReader.py"


    section " Pre Checks - Book ${book_name} "
    source_check_bad_code_sections "${book_name}" "$book_src" "$book_pre" "$book_out"
    source_check_bad_headings      "${book_name}" "$book_src" "$book_pre" "$book_out"


    ## copy directroy structure of
    ## arangodb/Documentation/Books/${book_name}
    ## to ppdir
    cd "$book_src" || ferr "could not enter book source dir: $book_src"
    find . -type d -exec mkdir -p "$book_pre/{}" \;
    tree "$book_pre"


    section   " Create Images - Book ${book_name} "
    run_ditaa "${book_name}" "$book_src" "$book_pre" "$book_out"


    section " Prepare Environment - Book ${book_name} "
    # copy / link SUMMARY.md and FOOTER.html
    say " - create SUMMARY.md"
    [[ -L "$book_pre/SUMMARY.md" ]] || cp "$book_src/SUMMARY.md" "$book_pre" || ferr "failed to SUMMARY"
    say " - create FOOTER.html"
    [[ -f "$book_pre/FOOTER.html" ]] || ln -s "$book_src/FOOTER.html" "$book_pre" || ferr "failed FOOTER"

    # copy styles
    say " - copy styles"
    cd "$book_pre"
    rsync -rh "$book_src/styles" "$book_pre" || ferr "failed to rsync styles"

    # copy book template
    say " - copy book.json"
    [[ -f "$book_pre/book.json" ]] || cp "${book_src}/book.json" "$book_pre"


    # generateMdFiles
    section " Generate Markdown - Book ${book_name} "
    cd "$ARANGO_SOURCE_DOC_BOOKS"
    #echo " - generating MD-Filedds"
    python ${ARANGO_SOURCE}/Documentation/Scripts/generateMdFiles.py \
           "${book_name}" \
           "$ARANGO_BUILD_DOC_PRE" \
           "$ARANGO_SOURCE/js/apps/system/_admin/aardvark/APP/api-docs.json" \
           "${FILTER:-""}" || ferr "failed to generate md files"

    test -d "$ARANGO_BUILD_DOC_OUT" || mkdir -p "$ARANGO_BUILD_DOC_OUT"


    section " Checking Integrity - Book ${book_name}"
    # run checks
    pp_check_summary              "${book_name}" "$book_src" "$book_pre" "$book_out"
    pp_check_leftover_docublocks  "${book_name}" "$book_src" "$book_pre" "$book_out"
    pp_check_restheader_leftovers "${book_name}" "$book_src" "$book_pre" "$book_out"
    pp_check_two_links            "${book_name}" "$book_src" "$book_pre" "$book_out"
    pp_check_directory_link       "${book_name}" "$book_src" "$book_pre" "$book_out"
    src_check_images_referenced   "${book_name}" "$book_src" "$book_pre" "$book_out"


    section " Fill in Templates - Book ${book_name}"
    # expand versions in files
    say " - replace placeholders"
    cd "$book_pre"
    for file in book.json styles/header.js README.md; do
        if [[ -f $file ]]; then
            say "   - running sed on $file"
            sed -e "s/VERSION_NUMBER/v${VERSION}/g" \
                -e "s;/devel;/${RELEASE_DIRECTORY};" \
                -e "s;@GSEARCH_ID@;${ALL_GSEARCH_ID[${book_name}]};" \
                -e "s;@GCHANGE_FREQ@;${GCHANGE_FREQ};" \
                -e "s;@GPRIORITY@;${GPRIORITY};" \
                -e "s;@BROWSEABLE_VERSIONS@;${BROWSEABLE_VERSIONS};" \
                \
                -i "${file}" || ferr "failed to run sed to subsitute variables"
        else
            echo "there is no file: $file in $book_pre"
        fi
    done


    section " Building Book - ${book_name} "

    #copy gitbook modules from cache in build image
    say " - copy node modules"
    local i="devel" #TODO FIXME get - calculate version to use
    local cache="/root/gitbook_cache/$i/$book_name"
    cp -r "$cache/node_modules" "$book_pre" || ferr "failed to copy node modules"

    say " - run gitbook"
    run_gitbook build "$book_pre" "$book_out"


    section " Clean Up - Book ${book_name} "
    say " - delete FOOTER.html"
    rm -f "$book_pre/FOOTER.html"

    # work around bug
    echo " - deleting markdown files in output (gitbook 3.x bug)"
    find "$book_out" -type f -name "*.md" -delete

    out_markdown_leftovers "${book_name}" "$book_src" "$book_pre" "$book_out"
    #pp_check_html_link     "${book_name}" "$book_src" "$book_pre" "$book_out"
}


build_books() {
    echo "================================================================================"
    section " Build All Books " | sed 's/-/=/g'
    local flushpp=true
    local flushout=true

    for book in ${ALLBOOKS}; do
        local book_src="$ARANGO_SOURCE_DOC_BOOKS/${book}"
        local book_pre="$ARANGO_BUILD_DOC_PRE/${book}"
        local book_out="$ARANGO_BUILD_DOC_OUT/${book}"

        if $flushout; then
            rm -fr "$book_out"
        fi

        if $flushpp; then
            rm -fr "$book_pre"
        fi

        build_book "${book}" "$@"

    done

    echo "==============================================================================="
    section " cross book checks "
    # cross_check_docublocks #TODO FIXME
    cross_check_dangling_anchors
    echo "##### Generating redirect index.html"; \
    echo '<html><head><meta http-equiv="refresh" content="0; url=Manual/"></head><body></body></html>' \
        > "$ARANGO_BUILD_DOC_OUT/index.html"
}

main(){
    show_config "$@"

    # parse args
    keep_old=false
    all_formats=false
    for arg in "$@"; do
        case $arg in
            --keep-old)
                keep_old=true
            ;;
            --all-formats)
                all_formats=true
            ;;
            *)
            ;;
        esac
    done

    # keep or delete files from last build
    if $keep_old; then
        rm -fr "$ARANGO_BUILD_DOC_OUT" || ferr "could not delete books output dir"
        rm -fr "$ARANGO_BUILD_DOC_PRE" || ferr "could not delete ppdir dir"
        mkdir -p "$ARANGO_BUILD_DOC_OUT" || ferr "could not create books output dir"
        mkdir -p "$ARANGO_BUILD_DOC_PRE" || ferr "could not create ppdir dir"
    fi

    #build html and run checks
    build_books "$@"

    # build other formats
    if $all_formats; then
        for book_name in $ALLBOOKS; do
            for format in $OTHER_MIME; do
                local out="${ARANGO_BUILD_DOC}/ArangoDB_${book_name}_${newVersionNumber}.${format}"
                run_gitbook "${GITBOOK_ARGS[@]}" "${format}" "$ARANGO_BUILD_DOC_PRE/$book_name" "${out}"
            done
        done
    fi

    echo
    success "building documentation"
    echo
}
main "$@"

exit $?

# # TODO - add this
# function build-dist-books()
# {
#     if test -z "${OUTPUT_DIR}"; then
#         echo "please specify --outputDir"
#         exit 1
#     fi
#     rm -rf books ppbooks
#
#     WD=$(pwd)
#     build-books
#     mkdir -p "${OUTPUT_DIR}"
#     (
#         mv books "ArangoDB-${newVersionNumber}"
#         pwd
#         tar -czf "${OUTPUT_DIR}/ArangoDB-${newVersionNumber}.tar.gz" "ArangoDB-${newVersionNumber}"
#         mv "ArangoDB-${newVersionNumber}" books
#     )
#     for book in $ALLBOOKS; do
#         cd "$WD"; build-book-dist "${book}"
#     done
# }
#
