#!/bin/bash
# Author - Jan Christoph Uhde
# Based on scripts by Willi and Simran

# get script dir
script_dir="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
## set options for safety
# fail on unset variables
set -u
# "prevent failing_cmd | echo "still exit status 0 ` from succeeding"
set -o pipefail

#### VARIABLES CONTROLLING THE BUILD ######################################
# The Variables are usually set by the docker entry point
#
# variables that MUST be set before invoking the script
#
[[ $ARANGO_WORK ]] || ferr "path to work dir not set"
# control if there is debug output or not
ARANGO_DEBUG=true

# variables that SHOULD be set before invoking the script
#
# path to "arangodb" source
export ARANGO_SOURCE="${ARANGO_SOURCE:-"$ARANGO_WORK/ArangoDB"}"
export ARANGO_SOURCE_DOC="${ARANGO_SOURCE_DOC:-"$ARANGO_SOURCE/Documentation"}"
export ARANGO_SOURCE_DOC_BOOKS="${ARANGO_SOURCE_DOC_BOOKS:-"$ARANGO_SOURCE_DOC/Documentation/Books"}"

# path to documentation build
export ARANGO_BUILD_DOC="${ARANGO_BUILD_DOC:-"$ARANGO_WORK/build-documentation"}"
export ARANGO_BUILD_DOC_PPDIR="${ARANGO_BUILD_DOC_PPDIR:-"$ARANGO_BUILD_DOC/ppdir"}"
export ARANGO_BUILD_DOC_BOOKS="${ARANGO_BUILD_DOC_BOOKS:-"$ARANGO_BUILD_DOC/books"}"

#### VARIABLES CONTROLLING THE BUILD - END ######################################

#### GOBAL SETUP ################################################################

# pull in bash_lib or create replacement functions
if . "/root/bash_lib"; then
    ferr(){ _o_ferr "$@"; }
    err(){ _o_err "$@"; }
    section(){ _o_section "$@"; }
    say(){ _o_say "$@"; }
    success(){ _o_success "$@"; }

else
    echo "could not source bash_lib"
    ferr(){ echo "Error: $@"; exit 1; }
    err(){ echo "Error: $@";  }
    section(){ echo "$@"; }
    say(){ echo "$@"; }
    success(){ echo "Success $@"; }
fi

success(){ echo "Success: $@"; }

# define global functions
debug(){ say "#-# DEBUG #-# " "$@"; }

section "ArangoDB Documenation Build script"

#### GLOBAL VARS THAT SHOULD NOT BE MODIFIED BY USERS ########################################################
ALLBOOKS="HTTP AQL Cookbook Drivers" #TODO reactivate Manual
ALLBOOKS="HTTP AQL Manual Cookbook Drivers"
OTHER_MIME="pdf epub mobi"
TRIPPLETICS='```'

newVersionNumber="$( tr -d '\r\n' < "$ARANGO_SOURCE/VERSION" )"
#If ../../VERSION contains the string "devel" the current date will be added to all pages containing the version.

if echo "${newVersionNumber}" | grep -q devel; then
    VERSION="${newVersionNumber} $(date +' %d. %b %Y ')"
    RELEASE_DIRECTORY=devel
else
    VERSION="${newVersionNumber}"
    RELEASE_DIRECTORY=$(sed "s;\\.[0-9]*$;;" <<< "${newVersionNumber}")
fi
export VERSION

declare -A ALL_GSEARCH_ID
for book in ${ALLBOOKS}; do
    ALL_GSEARCH_ID[$book]="$( grep "GSEARCH_ID_${book}" "$ARANGO_SOURCE/VERSIONS" |sed 's;.*"\([0-9a-zA-Z:_-]*\)".*;\1;' )"
done

GCHANGE_FREQ="$(grep "GCHANGE_FREQ" "$ARANGO_SOURCE/VERSIONS" |sed 's;.*"\([0-9a-zA-Z:]*\)".*;\1;')"
GPRIORITY="$(grep "GPRIORITY" "$ARANGO_SOURCE/VERSIONS" |sed 's;.*"\([0-9a-zA-Z.]*\)".*;\1;')"
BROWSEABLE_VERSIONS="$(grep "BROWSEABLE_VERSIONS" "$ARANGO_SOURCE/VERSIONS" |sed -e 's;" *$;;' -e 's;.*";;')"

INSTALLED_GITBOOK_VERSION="$(gitbook ls |grep '*'|sed "s;.*\* ;;")"
if test -z "${INSTALLED_GITBOOK_VERSION}"; then
    echo "your container doesn't come with a preloaded version of gitbook, please update it."
    exit 1
fi
GITBOOK_ARGS=(--gitbook "${INSTALLED_GITBOOK_VERSION}")
#### GLOBAL VARS THAT SHOULD NOT BE MODIFIED BY USERS - END ########################################################

# pull in build lib
. /$script_dir/buildLib || ferr "failed to source buildLib"
# builds a single book
function build_book() {
    cd "$ARANGO_SOURCE_DOC_BOOKS" #TODO remove

    local name="$1"
    local book_source="$ARANGO_SOURCE_DOC_BOOKS/${name}"
    local book_ppdir="$ARANGO_BUILD_DOC_PPDIR/${name}"
    local book_out="$ARANGO_BUILD_DOC_BOOKS/${name}"

    section "Generating book ${name}"
    echo "book source:       $book_source"
    echo "preprocessing dir: $book_ppdir"
    echo "output dir:        $book_out"


    mkdir -p "$book_ppdir"
    mkdir -p "$book_out"

    python $ARANGO_SOURCE/Documentation/Scripts/codeBlockReader.py || ferr "can not run codeBlockReader.py"

    section " Pre Checks - Book ${name} "
    source_check_bad_code_sections "${name}" "$book_source" "$book_ppdir" "$book_out"  #fix function
    source_check_bad_headings      "${name}" "$book_source" "$book_ppdir" "$book_out"  #fix function


    ## copy directroy structure of
    ## arangodb/Documentation/Books/${name}
    ## to ppdir
    cd "$book_source" || ferr "could not enter book source dir: $book_source"
    find . -type d -exec mkdir -p "$book_ppdir/{}" \;
    tree "$book_ppdir"

    section " Create Images - Book ${name} "
    #create ditaa images
    cd "$book_source"
    local use_ditaa=false
    if type ditaa; then
        say " - generating ditaa images"
        use_ditaa=true
    else
        say "- generating FAKE ditaa images - no ditaa installed"
    fi

    local file
    while read file; do
        local dest="$book_ppdir/${file//ditaa/png}"
        # if dest dir is not available then the creation of the
        # directory structures did most proably not work correctly
        if $use_ditaa; then
            ditaa "$file" "$dest" || ferr "ditaa for $file to $dest failed"
        else
            local fake="$ARANGO_SOURCE/js/node/node_modules/mocha/images/error.png"
            cp "$fake" "$dest" || ferr "fake ditaa for $file to $dest failed"
        fi
    done < <(find . -name "*.ditaa")


    section " Prepare Environment - Book ${name} "
    # copy / link SUMMARY.md and FOOTER.html
    say " - create SUMMARY.md"
    [[ -L "$book_ppdir/SUMMARY.md" ]] || ln -s "$book_source/SUMMARY.md" "$book_ppdir" || ferr "failed to SUMMARY"
    say " - create FOOTER.html"
    [[ -f "$book_ppdir/FOOTER.html" ]] || ln -s "$book_source/FOOTER.html" "$book_ppdir" || ferr "failed FOOTER"

    # copy styles
    say " - copy styles"
    cd "$book_ppdir"
    rsync -rh "$book_source/styles" "$book_ppdir" || ferr "failed to rsync styles"

    # copy book template
    say " - copy book.json"
    [[ -f "$book_ppdir/book.json" ]] || cp "${book_source}/book.json" "$book_ppdir"

    # generateMdFiles
    section " Generate Markdown - Book ${name} "
    cd "$ARANGO_SOURCE_DOC_BOOKS"
    #echo " - generating MD-Filedds"
    python ${ARANGO_SOURCE}/Documentation/Scripts/generateMdFiles.py \
           "${name}" \
           "$ARANGO_BUILD_DOC_PPDIR" \
           "$ARANGO_SOURCE/js/apps/system/_admin/aardvark/APP/api-docs.json" \
           "${FILTER:-""}" || ferr "failed to generate md files"

    test -d "$ARANGO_BUILD_DOC_BOOKS" || mkdir -p "$ARANGO_BUILD_DOC_BOOKS"

    section " Checking Integrity - Book ${name}"
    # run checks
    pp_check_summary                "${name}" "$book_source" "$book_ppdir" "$book_out"
    pp_check_leftover_docublocks    "${name}" "$book_source" "$book_ppdir" "$book_out"
    pp_check_restheader_leftovers   "${name}" "$book_source" "$book_ppdir" "$book_out"
    pp_check_two_links              "${name}" "$book_source" "$book_ppdir" "$book_out"
    pp_check_directory_link         "${name}" "$book_source" "$book_ppdir" "$book_out"

    # to fix
    src_check_images_referenced    "${name}" "$book_source" "$book_ppdir" "$book_out"

    section " Fill in Templates - Book ${name}"
    # expand versions in files
    say " - replace placeholders"
    cd "$book_ppdir"
    for file in book.json styles/header.js README.md; do
        if [[ -f $file ]]; then
            say "   - running sed on $file"
            sed -e "s/VERSION_NUMBER/v${VERSION}/g" \
                -e "s;/devel;/${RELEASE_DIRECTORY};" \
                -e "s;@GSEARCH_ID@;${ALL_GSEARCH_ID[${name}]};" \
                -e "s;@GCHANGE_FREQ@;${GCHANGE_FREQ};" \
                -e "s;@GPRIORITY@;${GPRIORITY};" \
                -e "s;@BROWSEABLE_VERSIONS@;${BROWSEABLE_VERSIONS};" \
                \
                -i "${file}" || ferr "failed to run sed to subsitute variables"
        else
            echo "there is no file: $file in $book_ppdir"
        fi
    done

    section " Building Book - ${name} "
    #copy gitbook modules form cache in build image
    i="devel" #TODO get versiont

    #TODO FIXME
    cache="/root/gitbook_cache/$i/$name"
    modules="$cache/node_modules"
    say " - copy node modules"
    cp -r "$modules" "$book_ppdir" || ferr "failed to copy node modules"

    say " - run gitbook"
    cd "$book_ppdir"

    local cmd=( gitbook "${GITBOOK_ARGS[@]}" build "$book_ppdir" "$book_out" )
    echo "run ${cmd[@]}"
    if ! time "${cmd[@]}" ; then
        echo "## install log  ###########################################"
        cat "$cache/book_install.log"
        echo "## book.json at install###########################################"
        cat "$cache/book.json_at_install"
        echo "## diff ###########################################"
        diff book.json "$cache/book.json_at_install"
        echo "## book.json ###########################################"
        cat book.json
        echo "## modules ###########################################"
        ls -lisah node_modules
        ferr "running gitbook failed"
    fi

    section " Clean Up - Book ${name} "
    say " - delete FOOTER.html"
    rm -f "$book_ppdir/FOOTER.html"

    # work around bug
    echo " - deleting markdown files in output (gitbook 3.x bug)"
    find "$book_out" -type f -name "*.md" -delete

    book_check_post_build_markdown_leftovers "${name}" "$book_source" "$book_ppdir" "$book_out"
    pp_check_html_link                       "${name}" "$book_source" "$book_ppdir" "$book_out"
}


build_books() {
    section " Build All Books "
    local flushpp=true
    local flushout=true

    for book in ${ALLBOOKS}; do
        local book_source="$ARANGO_SOURCE_DOC_BOOKS/${book}"
        local book_ppdir="$ARANGO_BUILD_DOC_PPDIR/${book}"
        local book_out="$ARANGO_BUILD_DOC_BOOKS/${book}"

        if $flushout; then
            rm -fr "$book_out"
        fi

        if $flushpp; then
            rm -fr "$book_ppdir"
        fi

        section "build book $book"
        build_book "${book}"

    done

    section "cross book checks"
    cross_check_docublocks ""
    cross_check_dangling_anchors ""
    echo "##### Generating redirect index.html"; \
    echo '<html><head><meta http-equiv="refresh" content="0; url=Manual/"></head><body></body></html>' > books/index.html
}

main(){
    show_config
    cd "$ARANGO_SOURCE_DOC_BOOKS" # TODO remove

    #rm -fr "$ARANGO_BUILD_DOC_BOOKS" || ferr "could not delete books output dir"
    #rm -fr "$ARANGO_BUILD_DOC_PPDIR" || ferr "could not delete ppdir dir"
    #mkdir -p "$ARANGO_BUILD_DOC_BOOKS" || ferr "could not create books output dir"
    #mkdir -p "$ARANGO_BUILD_DOC_PPDIR" || ferr "could not create ppdir dir"

    build_books

    echo
    success "building documentation"
    echo
}
main "$@"

exit $?


function build-dist-books()
{
    if test -z "${OUTPUT_DIR}"; then
        echo "please specify --outputDir"
        exit 1
    fi
    rm -rf books ppbooks

    WD=$(pwd)
    build-books
    mkdir -p "${OUTPUT_DIR}"
    (
        mv books "ArangoDB-${newVersionNumber}"
        pwd
        tar -czf "${OUTPUT_DIR}/ArangoDB-${newVersionNumber}.tar.gz" "ArangoDB-${newVersionNumber}"
        mv "ArangoDB-${newVersionNumber}" books
    )
    for book in $ALLBOOKS; do
        cd "$WD"; build-book-dist "${book}"
    done
}

#VERB=$1
#shift
#
#if test -z "$VERB"; then
#    VERB=build-books
#fi

#while [ $# -gt 0 ];  do
#    case "$1" in
#        --name)
#            shift
#            NAME=$1
#            shift
#            ;;
#        --filter)
#            shift
#            FILTER=$1
#            export FILTER
#            shift
#            ;;
#        *)
#            show_help
#            exit 1
#            ;;
#
#    esac
#done


# case "$VERB" in
#     build-books)
#         ;;
#   #  check-book)
#   #      check-summary "${NAME}"
#   #      book-check-leftover-docublocks "${NAME}"
#   #      book-check-restheader-leftovers "${NAME}"
#   #      ppbook-check-two-links "${NAME}"
#   #      ppbook-check-directory-link "${NAME}"
#   #      book-check-images-referenced "${NAME}"
#   #      book-check-markdown-leftovers "${NAME}"
#   #      check-dangling-anchors "${NAME}" "some of the above errors may be because of referenced books weren't rebuilt."
#   #      ;;
#     *)
#         exit 1
#         ;;
# esac

